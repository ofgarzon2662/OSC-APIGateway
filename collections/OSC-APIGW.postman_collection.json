{
	"info": {
		"_postman_id": "d8002561-9dd7-4fe2-9f1e-8a26e2c60c7f",
		"name": "OSC-APIGW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29465325"
	},
	"item": [
		{
			"name": "Organization",
			"item": [
				{
					"name": "Log in as Admin 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token_ADMIN1\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Message</th>\r",
									"        <th>StatusCode</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.message}}</td>\r",
									"        <td>{{response.statusCode}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return {response: pm.response.json()}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{ADMIN1_USERNAME}}\",\r\n   \"password\": \"{{ADMIN1_PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 1 Create Org short name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"CODE IS 400\", function() {\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"\r",
									"pm.test(\"Get message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The name of the organization is required and must have at least 4 characters\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"UCS\",\r\n    \"description\": \"This organization focuses on {{$randomLoremWords}} and its main mission in life is {{$randomLoremWords}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 1 Create Org No Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"CODE IS 400\", function() {\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"\r",
									"pm.test(\"Get message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The description is required and must be at least 20 characters long\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"UCSD\",\r\n    \"description\": \"Short\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 1 Create Org long Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"CODE IS 400\", function() {\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"\r",
									"pm.test(\"Obtener el mensaje de error esperado\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The description cannot be longer than 250 characters\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"UCSD\",\r\n    \"description\": \"Founded in 1960, the University of California, San Diego (UCSD) is a renowned public research university located in La Jolla, California. Known for its innovation, academic excellence, and vibrant campus culture, UCSD offers top-ranked programs in a wide range of fields including oceanography, engineering, biological sciences, and public health. The university is home to over 38,000 students, cutting-edge research facilities, and numerous Nobel laureates and distinguished faculty members. UCSD also prioritizes sustainability, diversity, and global engagement, fostering an inclusive environment that supports groundbreaking research and community impact.\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 1 Creates an org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"orgId\", pm.response.json().id);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"This organization focuses on {{$randomLoremWords}} and its main mission in life is {{$randomLoremWords}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log in as Admin 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token_ADMIN2\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{ADMIN2_USERNAME}}\",\r\n   \"password\": \"{{ADMIN2_PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN 1 Creates a PI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Capturar los datos enviados en la solicitud",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"// Guardar los valores enviados para comparar después",
									"const sentName = requestData.name;",
									"const sentUsername = requestData.username;",
									"const sentRole = requestData.role",
									"",
									"// Guardar variables de entorno",
									"pm.environment.set(\"userId1\", pm.response.json().id);",
									"pm.environment.set(\"usernameUser1\", pm.response.json().username);",
									"pm.environment.set(\"nameOfUser1\", pm.response.json().name);",
									"pm.environment.set(\"pi_password\", requestData.password); // Save PI password for later use",
									"",
									"pm.test(\"Status code is 201 Created\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verificar información del usuario",
									"pm.test(\"User information is valid\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									"// Verificar que los datos de respuesta coinciden con los enviados",
									"pm.test(\"User data in response matches request data\", function() {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Verificar que el nombre coincide",
									"    pm.expect(responseData.name).to.equal(sentName, \"Name in response should match sent name\");",
									"        ",
									"    // Verificar que el username coincide",
									"    pm.expect(responseData.username).to.equal(sentUsername, \"Username in response should match sent username\");",
									"});",
									"",
									"// Verificar que el usuario tiene el rol de PI",
									"pm.test(\"User has correct role\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.roles).to.be.an('array');",
									"    pm.expect(responseData.roles).to.include(sentRole, \"Role in response should match sent role\");",
									"});",
									"",
									"// Guardar datos del usuario para verificación posterior",
									"pm.collectionVariables.set(\"pi_user_id\", pm.response.json().id);",
									"pm.collectionVariables.set(\"pi_username\", pm.response.json().username);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un nombre aleatorio\r",
									"let fullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (fullName.length < 8) {\r",
									"    fullName = fullName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - fullName.length));\r",
									"}\r",
									"pm.environment.set(\"validFullName\", fullName);\r",
									"\r",
									"// Generar un nombre de usuario aleatorio\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (userName.length < 8) {\r",
									"    userName = userName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - userName.length));\r",
									"}\r",
									"pm.environment.set(\"validUserName\", userName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{validFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{validUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"role\": \"pi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 2 Creates a Collaborator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Capturar los datos enviados en la solicitud",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"// Guardar los valores enviados para comparar después",
									"const sentName = requestData.name;",
									"const sentUsername = requestData.username;",
									"const sentRole = requestData.role",
									"",
									"// Guardar variables de entorno",
									"pm.environment.set(\"collaboratorId\", pm.response.json().id);",
									"pm.environment.set(\"collaborator1Username\", pm.response.json().username);",
									"pm.environment.set(\"collaborator1_password\", requestData.password); // Save PI password for later use",
									"",
									"",
									"// Verificar código de estado",
									"pm.test(\"Status code is 201 Created\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verificar información del usuario",
									"pm.test(\"collaborator user information is valid\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									"// Verificar que los datos de respuesta coinciden con los enviados",
									"pm.test(\"collaborator data in response matches request data\", function() {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Verificar que el nombre coincide",
									"    pm.expect(responseData.name).to.equal(sentName, \"Name in response should match sent name\");",
									"        ",
									"    // Verificar que el username coincide",
									"    pm.expect(responseData.username).to.equal(sentUsername, \"Username in response should match sent username\");",
									"});",
									"",
									"// Verificar que el usuario tiene el rol de collaborator",
									"pm.test(\"User has correct collaborator role\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.roles).to.be.an('array');",
									"    pm.expect(responseData.roles).to.include(sentRole, \"Role in response should match sent role\");",
									"});",
									"",
									"// Guardar datos del usuario collaborator para verificación posterior",
									"pm.collectionVariables.set(\"collaborator_user_id\", pm.response.json().id);",
									"pm.collectionVariables.set(\"collaborator_username\", pm.response.json().username);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un nombre aleatorio\r",
									"let fullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (fullName.length < 8) {\r",
									"    fullName = fullName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - fullName.length));\r",
									"}\r",
									"pm.environment.set(\"validFullName2\", fullName);\r",
									"\r",
									"// Generar un nombre de usuario aleatorio\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (userName.length < 8) {\r",
									"    userName = userName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - userName.length));\r",
									"}\r",
									"pm.environment.set(\"validUserName2\", userName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{validFullName2}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{validUserName2}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"role\": \"collaborator\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "PI user logs in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token_PI\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Status code is 201 Created\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Token is present\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"PI login successful\", function() {\r",
									"    // Verificar que hay un token de respuesta (indicación de login exitoso)\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.token).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{pi_username}}\",\r\n   \"password\": \"{{pi_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator Logs In",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token_PI\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Status code is 201 Created\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Token is present\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"PI login successful\", function() {\r",
									"    // Verificar que hay un token de respuesta (indicación de login exitoso)\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.token).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{collaborator1Username}}\",\r\n   \"password\": \"{{collaborator1_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "PI Deletes an Org - Fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"code is 204\", function() {\r",
									"    pm.response.to.have.status(403)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_PI}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator Deletes an Org - Fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"code is 403\", function() {\r",
									"    pm.response.to.have.status(403)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_collaborator1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 1 Delete NonExistent Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organization with the provided id does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{$randomUUID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{$randomUUID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 1 Creates an org - Fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(412)\r",
									"});\r",
									"\r",
									"pm.test(\"Obtener el mensaje de error esperado\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"There is already an organization in the database. There can only be one.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"This organization focuses on {{$randomLoremWords}} and its main mission in life is {{$randomLoremWords}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator Get All Orgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Non Empty list\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"    pm.expect(pm.response.json()).to.have.lengthOf(1);\r",
									"    pm.expect(pm.response.json()[0].id).to.equal(pm.environment.get(\"orgId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_collaborator1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator Get One Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Non empty response\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"orgId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_collaborator1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 1 Update an Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().name).to.contain('Real Madrid CF');\r",
									"    pm.expect(pm.response.json().description).to.contain('Club de fútbol de Madrid');\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"orgId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Real Madrid CF\",\r\n    \"description\": \"Club de fútbol de Madrid, España, fundado en 1902. Ganador de múltiples títulos europeos.\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator 2 Get One Org - Fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 401\", function() {\r",
									"    pm.response.to.have.status(401)\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_COLLABORATOR2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator 2 Get All Orgs - Fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 401\", function() {\r",
									"    pm.response.to.have.status(401)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_COLLABORATOR2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 2 Update an Org that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organization with the provided id does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN2}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Real Madrid CF\",\r\n    \"description\": \"Club de fútbol de Madrid, España, fundado en 1902. Ganador de múltiples títulos europeos.\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{$guid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{$guid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 2 Update an Org short desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 400\", function() {\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The description is required and must be at least 20 characters long\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN2}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Real Madrid CF\",\r\n    \"description\": \"Club.\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 2 Update an Org long description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 400\", function() {\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"\r",
									"pm.test(\"Obtener el mensaje de error esperado\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The description cannot be longer than 250 characters\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN2}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Real Madrid CF\",\r\n    \"description\": \"Real Madrid Club de Fútbol, commonly known as Real Madrid, is a professional football club based in Madrid, Spain. Founded on March 6, 1902, it is one of the most successful and prestigious clubs in football history. Known for its iconic all-white kit, Real Madrid has a rich legacy that includes numerous domestic and international titles, including a record number of UEFA Champions League titles and La Liga championships. The club is renowned for its loyal fanbase, global influence, and its home stadium, the Santiago Bernabéu, which has witnessed some of the greatest moments in football history. Real Madrid's philosophy emphasizes excellence, resilience, and a commitment to nurturing talent, from legendary players like Alfredo Di Stéfano and Cristiano Ronaldo to rising stars. As a symbol of Spanish football, the club is celebrated worldwide for its contributions to the sport and its enduring spirit of competition and success.\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator 1 Update an Org - Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains expected error message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.message).to.eql(\"Forbidden resource\");\r",
									"    pm.expect(jsonData.error).to.eql(\"Forbidden\");\r",
									"    pm.expect(jsonData.statusCode).to.eql(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_collaborator1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"This organization focuses on {{$randomLoremWords}} and its main mission in life is {{$randomLoremWords}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PI Update an Org - Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains expected error message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.message).to.eql(\"Forbidden resource\");\r",
									"    pm.expect(jsonData.error).to.eql(\"Forbidden\");\r",
									"    pm.expect(jsonData.statusCode).to.eql(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_PI}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"This organization focuses on {{$randomLoremWords}} and its main mission in life is {{$randomLoremWords}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator 2 Creates an Org - Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains expected error message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.message).to.eql(\"Forbidden resource\");\r",
									"    pm.expect(jsonData.error).to.eql(\"Forbidden\");\r",
									"    pm.expect(jsonData.statusCode).to.eql(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_collaborator1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"This organization focuses on {{$randomLoremWords}} and its main mission in life is {{$randomLoremWords}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "PI Creates an Org - Forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains expected error message\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    \r",
									"    pm.expect(jsonData.message).to.eql(\"Forbidden resource\");\r",
									"    pm.expect(jsonData.error).to.eql(\"Forbidden\");\r",
									"    pm.expect(jsonData.statusCode).to.eql(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_PI}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"This organization focuses on {{$randomLoremWords}} and its main mission in life is {{$randomLoremWords}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 1 Deletes Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"code is 204\", function() {\r",
									"    pm.response.to.have.status(204)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 1 tries to get all Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Exactly 2 admin users, no PI/Collaborator', () => {",
									"  const users = pm.response.json();",
									"  pm.expect(users.length).to.eql(2);                      // only two users",
									"  users.forEach(u => pm.expect(u.roles).to.eql(['admin'])); // each has exactly [\"admin\"]",
									"});",
									"",
									"pm.test(\"Code is 200\", function() {",
									"    pm.response.to.have.status(200)",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Log in as Admin 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token_ADMIN1\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{ADMIN1_USERNAME}}\",\r\n   \"password\": \"{{ADMIN1_PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Admin Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* ---------- Basic status & shape ---------- */",
									"pm.test('Status code is 200 OK', () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"const body = pm.response.json();",
									"",
									"pm.test('Message is correct', () => {",
									"  pm.expect(body.message).to.eql('Admin users found');",
									"});",
									"",
									"pm.test('Count is 2 and matches array length', () => {",
									"  pm.expect(body.users.length).to.be.at.least(2);   // ≥ 3 admins",
									"  });",
									"",
									"/* ---------- Content checks ---------- */",
									"pm.test('Both users are admins and only admins', () => {",
									"  body.users.forEach(u => {",
									"    pm.expect(u.roles).to.eql(['admin']);          // exactly one role === 'admin'",
									"  });",
									"});",
									"",
									"pm.test('No PI or COLLABORATOR roles present', () => {",
									"  const forbidden = body.users.filter(u =>",
									"    u.roles.some(r => r.toLowerCase() === 'pi' || r.toLowerCase() === 'collaborator')",
									"  );",
									"  pm.expect(forbidden.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/admins/check-admin-users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"admins",
								"check-admin-users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN 1 Creates a PI - Fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* ----------  BASIC STATUS & ERROR MESSAGE ---------- */",
									"pm.test('Status code is 400 Bad Request', () => {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Error message is correct', () => {",
									"  const body = pm.response.json();",
									"  pm.expect(body).to.have.property('message',",
									"    'Failed to associate user with organization: Cannot create PI or Collaborator users: No organization exists in the system');",
									"  pm.expect(body).to.have.property('error', 'Bad Request');",
									"  pm.expect(body).to.have.property('statusCode', 400);",
									"});",
									"",
									"/* ----------  ENSURE NO USER OBJECT RETURNED ---------- */",
									"pm.test('Response does not contain user data', () => {",
									"  const body = pm.response.json();",
									"  pm.expect(body).to.not.have.property('id');",
									"  pm.expect(body).to.not.have.property('username');",
									"  pm.expect(body).to.not.have.property('email');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un nombre aleatorio\r",
									"let fullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (fullName.length < 8) {\r",
									"    fullName = fullName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - fullName.length));\r",
									"}\r",
									"pm.environment.set(\"validFullName\", fullName);\r",
									"\r",
									"// Generar un nombre de usuario aleatorio\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (userName.length < 8) {\r",
									"    userName = userName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - userName.length));\r",
									"}\r",
									"pm.environment.set(\"validUserName\", userName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{validFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{validUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"role\": \"pi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN 1 Creates a Collaborator - Fails Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* ----------  BASIC STATUS & ERROR MESSAGE ---------- */",
									"pm.test('Status code is 400 Bad Request', () => {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Error message is correct', () => {",
									"  const body = pm.response.json();",
									"  pm.expect(body).to.have.property('message',",
									"    'Failed to associate user with organization: Cannot create PI or Collaborator users: No organization exists in the system');",
									"  pm.expect(body).to.have.property('error', 'Bad Request');",
									"  pm.expect(body).to.have.property('statusCode', 400);",
									"});",
									"",
									"/* ----------  ENSURE NO USER OBJECT RETURNED ---------- */",
									"pm.test('Response does not contain user data', () => {",
									"  const body = pm.response.json();",
									"  pm.expect(body).to.not.have.property('id');",
									"  pm.expect(body).to.not.have.property('username');",
									"  pm.expect(body).to.not.have.property('email');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un nombre aleatorio\r",
									"let fullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (fullName.length < 8) {\r",
									"    fullName = fullName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - fullName.length));\r",
									"}\r",
									"pm.environment.set(\"validFullName\", fullName);\r",
									"\r",
									"// Generar un nombre de usuario aleatorio\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (userName.length < 8) {\r",
									"    userName = userName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - userName.length));\r",
									"}\r",
									"pm.environment.set(\"validUserName\", userName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{validFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{validUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"role\": \"collaborator\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN 1 Creates a 3rd Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* ----------  STATUS 201  ---------- */",
									"pm.test('Status code is 201 Created', () => {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"/* ----------  ESTRUCTURA DEL OBJETO ---------- */",
									"const user = pm.response.json();",
									"",
									"pm.test('Respuesta contiene los campos necesarios', () => {",
									"  pm.expect(user).to.have.property('id').that.is.a('string').and.is.not.empty;",
									"  pm.expect(user).to.have.property('name').that.is.a('string').and.is.not.empty;",
									"  pm.expect(user).to.have.property('username').that.is.a('string').and.is.not.empty;",
									"  pm.expect(user).to.have.property('roles').that.is.an('array').with.lengthOf(1);",
									"});",
									"",
									"/* ----------  SOLO ROL ADMIN ---------- */",
									"pm.test('El usuario es únicamente ADMIN', () => {",
									"  pm.expect(user.roles).to.eql(['admin']);",
									"});",
									"",
									"/* ----------  GUARDAR VARIABLES PARA OTROS TESTS (OPCIONAL) ---------- */",
									"pm.environment.set('createdAdminId', user.id);",
									"pm.environment.set('createdAdminUsername', user.username);",
									"pm.environment.set('createdAdminName', user.name);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un nombre aleatorio\r",
									"let fullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (fullName.length < 8) {\r",
									"    fullName = fullName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - fullName.length));\r",
									"}\r",
									"pm.environment.set(\"validFullName\", fullName);\r",
									"\r",
									"// Generar un nombre de usuario aleatorio\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (userName.length < 8) {\r",
									"    userName = userName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - userName.length));\r",
									"}\r",
									"pm.environment.set(\"validUserName\", userName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{validFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{validUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"role\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get 3 Admin Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* ----------  BASIC STATUS & SHAPE ---------- */",
									"pm.test('Status code is 200 OK', () => {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"const body = pm.response.json();",
									"",
									"pm.test('Message is correct', () => {",
									"  pm.expect(body.message).to.eql('Admin users found');",
									"});",
									"",
									"pm.test('Count matches array length', () => {",
									"  pm.expect(body.count).to.eql(body.users.length);",
									"  pm.expect(body.users.length).to.be.at.least(3);",
									"",
									"});",
									"",
									"/* ----------  CONTENT CHECKS ---------- */",
									"pm.test('All returned users son solo ADMIN', () => {",
									"  body.users.forEach(u => {",
									"    pm.expect(u.roles).to.eql(['admin']);   // exactamente [\"admin\"]",
									"  });",
									"});",
									"",
									"pm.test('No roles PI o COLLABORATOR presentes', () => {",
									"  const forbidden = body.users.filter(u =>",
									"    u.roles.some(r => r.toLowerCase() === 'pi' || r.toLowerCase() === 'collaborator')",
									"  );",
									"  pm.expect(forbidden.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/admins/check-admin-users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"admins",
								"check-admin-users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 1 Creates an org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"orgId\", pm.response.json().id);\r",
									"pm.environment.set(\"orgName\", pm.response.json().name);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"This organization focuses on {{$randomLoremWords}} and its main mission in life is {{$randomLoremWords}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log in as Admin 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token_ADMIN2\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{ADMIN2_USERNAME}}\",\r\n   \"password\": \"{{ADMIN2_PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN 1 Creates a PI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Capturar los datos enviados en la solicitud",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"// Guardar los valores enviados para comparar después",
									"const sentName = requestData.name;",
									"const sentUsername = requestData.username;",
									"const sentRole = requestData.role",
									"",
									"// Guardar variables de entorno",
									"pm.environment.set(\"userId1\", pm.response.json().id);",
									"pm.environment.set(\"usernameUser1\", pm.response.json().username);",
									"pm.environment.set(\"nameOfUser1\", pm.response.json().name);",
									"pm.environment.set(\"pi_password\", requestData.password); // Save PI password for later use",
									"",
									"pm.test(\"Status code is 201 Created\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verificar información del usuario",
									"pm.test(\"User information is valid\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									"// Verificar que los datos de respuesta coinciden con los enviados",
									"pm.test(\"User data in response matches request data\", function() {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Verificar que el nombre coincide",
									"    pm.expect(responseData.name).to.equal(sentName, \"Name in response should match sent name\");",
									"    ",
									"    // Verificar que el username coincide",
									"    pm.expect(responseData.username).to.equal(sentUsername, \"Username in response should match sent username\");",
									"});",
									"",
									"// Verificar que el usuario tiene el rol de PI",
									"pm.test(\"User has correct role\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.roles).to.be.an('array');",
									"    pm.expect(responseData.roles).to.include(sentRole, \"Role in response should match sent role\");",
									"});",
									"",
									"// Verificar que el usuario está asociado con la organización correcta",
									"pm.test(\"User is associated with correct organization\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.organizationName).to.equal(pm.environment.get(\"orgName\"), \"Organization name in response should match organization ID\");",
									"});",
									"",
									"// Guardar datos del usuario para verificación posterior",
									"pm.collectionVariables.set(\"pi_user_id\", pm.response.json().id);",
									"pm.collectionVariables.set(\"pi_username\", pm.response.json().username);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un nombre aleatorio\r",
									"let fullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (fullName.length < 8) {\r",
									"    fullName = fullName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - fullName.length));\r",
									"}\r",
									"pm.environment.set(\"validFullName\", fullName);\r",
									"\r",
									"// Generar un nombre de usuario aleatorio\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (userName.length < 8) {\r",
									"    userName = userName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - userName.length));\r",
									"}\r",
									"pm.environment.set(\"validUserName\", userName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{validFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{validUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"role\": \"pi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 2 Creates a Collaborator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Capturar los datos enviados en la solicitud",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"// Guardar los valores enviados para comparar después",
									"const sentName = requestData.name;",
									"const sentUsername = requestData.username;",
									"const sentRole = requestData.role",
									"",
									"// Guardar variables de entorno",
									"pm.environment.set(\"collaboratorId\", pm.response.json().id);",
									"pm.environment.set(\"collaborator1Username\", pm.response.json().username);",
									"pm.environment.set(\"collaborator1_password\", requestData.password); // Save PI password for later use",
									"",
									"",
									"// Verificar código de estado",
									"pm.test(\"Status code is 201 Created\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verificar información del usuario",
									"pm.test(\"collaborator user information is valid\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									"// Verificar que los datos de respuesta coinciden con los enviados",
									"pm.test(\"collaborator data in response matches request data\", function() {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Verificar que el nombre coincide",
									"    pm.expect(responseData.name).to.equal(sentName, \"Name in response should match sent name\");",
									"    ",
									"    // Verificar que el username coincide",
									"    pm.expect(responseData.username).to.equal(sentUsername, \"Username in response should match sent username\");",
									"});",
									"",
									"// Verificar que el usuario tiene el rol de collaborator",
									"pm.test(\"User has correct collaborator role\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.roles).to.be.an('array');",
									"    pm.expect(responseData.roles).to.include(sentRole, \"Role in response should match sent role\");",
									"});",
									"",
									"// Verificar que el usuario está asociado con la organización correcta",
									"pm.test(\"User is associated with correct organization\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.organizationName).to.equal(pm.environment.get(\"orgName\"), \"Organization name in response should match organization ID\");",
									"});",
									"",
									"// Guardar datos del usuario collaborator para verificación posterior",
									"pm.collectionVariables.set(\"collaborator_user_id\", pm.response.json().id);",
									"pm.collectionVariables.set(\"collaborator_username\", pm.response.json().username);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un nombre aleatorio\r",
									"let fullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (fullName.length < 8) {\r",
									"    fullName = fullName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - fullName.length));\r",
									"}\r",
									"pm.environment.set(\"validFullName2\", fullName);\r",
									"\r",
									"// Generar un nombre de usuario aleatorio\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (userName.length < 8) {\r",
									"    userName = userName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - userName.length));\r",
									"}\r",
									"pm.environment.set(\"validUserName2\", userName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{validFullName2}}\",\r\n    \"email\": \"colaborator@email.com\",\r\n    \"username\": \"{{validUserName2}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"role\": \"collaborator\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 2 Creates a Collaborator repeat name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 400\", function() {",
									"    pm.response.to.have.status(400)",
									"});",
									"",
									"pm.test(\"Message is correct\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User with this username or email already exists\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un nombre aleatorio\r",
									"let fullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (fullName.length < 8) {\r",
									"    fullName = fullName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - fullName.length));\r",
									"}\r",
									"pm.environment.set(\"validFullName2\", fullName);\r",
									"\r",
									"// Generar un nombre de usuario aleatorio\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (userName.length < 8) {\r",
									"    userName = userName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - userName.length));\r",
									"}\r",
									"pm.environment.set(\"validUserName2\", userName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{validFullName2}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{collaborator1Username}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"role\": \"collaborator\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 2 Creates a Collaborator repeat email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 400\", function() {",
									"    pm.response.to.have.status(400)",
									"});",
									"",
									"pm.test(\"Message is correct\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"User with this username or email already exists\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un nombre aleatorio\r",
									"let fullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (fullName.length < 8) {\r",
									"    fullName = fullName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - fullName.length));\r",
									"}\r",
									"pm.environment.set(\"validFullName2\", fullName);\r",
									"\r",
									"// Generar un nombre de usuario aleatorio\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (userName.length < 8) {\r",
									"    userName = userName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - userName.length));\r",
									"}\r",
									"pm.environment.set(\"validUserName2\", userName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{validFullName2}}\",\r\n    \"email\": \"colaborator@email.com\",\r\n    \"username\": \"{{collaborator1Username}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"role\": \"collaborator\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 2 Creates a Collaborator short Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 400\", function() {",
									"    pm.response.to.have.status(400)",
									"});",
									"",
									"pm.test(\"Message is correct\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Password must be at least 8 characters long\")",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un nombre aleatorio\r",
									"let fullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (fullName.length < 8) {\r",
									"    fullName = fullName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - fullName.length));\r",
									"}\r",
									"pm.environment.set(\"validFullName2\", fullName);\r",
									"\r",
									"// Generar un nombre de usuario aleatorio\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (userName.length < 8) {\r",
									"    userName = userName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - userName.length));\r",
									"}\r",
									"pm.environment.set(\"validUserName2\", userName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Pepito Gonzalez}\",\r\n    \"email\": \"anothercollaborator@email.com\",\r\n    \"username\": \"PepiGonzo\",\r\n    \"password\": \"pas\",\r\n    \"role\": \"collaborator\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 1 Gets all Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array of users\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"    pm.expect(responseData.length).to.be.greaterThan(0);",
									"});",
									"",
									"// Get the saved PI and collaborator usernames",
									"const piUsername = pm.collectionVariables.get(\"pi_username\");",
									"const collaboratorUsername = pm.collectionVariables.get(\"collaborator_username\");",
									"",
									"// Test that the PI user is in the users list",
									"pm.test(\"PI user is in the users list\", function() {",
									"    const responseData = pm.response.json();",
									"    const piUser = responseData.find(user => user.username === piUsername);",
									"    ",
									"    pm.expect(piUser).to.not.be.undefined;",
									"    pm.expect(piUser.roles).to.be.an('array');",
									"    pm.expect(piUser.roles).to.include('pi');",
									"});",
									"",
									"// Test that the collaborator user is in the users list",
									"pm.test(\"Collaborator user is in the users list\", function() {",
									"    const responseData = pm.response.json();",
									"    const collaboratorUser = responseData.find(user => user.username === collaboratorUsername);",
									"    ",
									"    pm.expect(collaboratorUser).to.not.be.undefined;",
									"    pm.expect(collaboratorUser.roles).to.be.an('array');",
									"    pm.expect(collaboratorUser.roles).to.include('collaborator'); // Changed from 'collaborator' to 'collaborator'",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin2 Gets PI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Get the saved PI user data",
									"const piUserId = pm.collectionVariables.get(\"pi_user_id\");",
									"const piUsername = pm.collectionVariables.get(\"pi_username\");",
									"const piEmail = pm.collectionVariables.get(\"pi_email\");",
									"",
									"pm.test(\"Status code is 200 OK\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"PI user information is correct\", function() {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.equal(piUserId);",
									"    pm.expect(responseData.username).to.equal(piUsername);",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									"pm.test(\"PI user has correct role\", function() {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.roles).to.be.an('array');",
									"    pm.expect(responseData.roles).to.include('pi');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/{{pi_user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{pi_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PI user logs in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token_PI\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Status code is 201 Created\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Token is present\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"PI login successful\", function() {\r",
									"    // Verificar que hay un token de respuesta (indicación de login exitoso)\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.token).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{pi_username}}\",\r\n   \"password\": \"{{pi_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator1 logs in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token_collaborator1\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Status code is 201 Created\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Token is present\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"collaborator login successful\", function() {\r",
									"    // Verificar que hay un token de respuesta (indicación de login exitoso)\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.token).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{collaborator1Username}}\",\r\n   \"password\": \"{{collaborator1_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "PI Creates Collaborator2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Capturar los datos enviados en la solicitud",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"// Guardar los valores enviados para comparar después",
									"const sentName = requestData.name;",
									"const sentUsername = requestData.username;",
									"const sentRole = requestData.role",
									"",
									"// Guardar variables de entorno",
									"pm.environment.set(\"collaborator2Id\", pm.response.json().id);",
									"pm.environment.set(\"collaborator2Username\", pm.response.json().username);",
									"pm.environment.set(\"collaborator2password\", requestData.password)",
									"",
									"// Verificar código de estado",
									"pm.test(\"Status code is 201 Created\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verificar información del usuario",
									"pm.test(\"collaborator 2 user information is valid\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									"// Verificar que los datos de respuesta coinciden con los enviados",
									"pm.test(\"collaborator 2 data in response matches request data\", function() {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Verificar que el nombre coincide",
									"    pm.expect(responseData.name).to.equal(sentName, \"Name in response should match sent name\");",
									"    ",
									"    // Verificar que el username coincide",
									"    pm.expect(responseData.username).to.equal(sentUsername, \"Username in response should match sent username\");",
									"});",
									"",
									"// Verificar que el usuario tiene el rol de collaborator",
									"pm.test(\"User has correct collaborator role\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.roles).to.be.an('array');",
									"    pm.expect(responseData.roles).to.include(sentRole, \"Role in response should match sent role\");",
									"});",
									"",
									"// Verificar que el usuario está asociado con la organización correcta",
									"pm.test(\"User is associated with correct organization\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.organizationName).to.equal(pm.environment.get(\"orgName\"), \"Organization name in response should match organization ID\");",
									"});",
									"",
									"// Guardar datos del usuario collaborator para verificación posterior",
									"pm.collectionVariables.set(\"collaborator2_user_id\", pm.response.json().id);",
									"pm.collectionVariables.set(\"collaborator2_username\", pm.response.json().username);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un nombre aleatorio\r",
									"let fullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (fullName.length < 8) {\r",
									"    fullName = fullName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - fullName.length));\r",
									"}\r",
									"pm.environment.set(\"validFullName3\", fullName);\r",
									"\r",
									"// Generar un nombre de usuario aleatorio\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (userName.length < 8) {\r",
									"    userName = userName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - userName.length));\r",
									"}\r",
									"pm.environment.set(\"validUserName3\", userName);\r",
									"\r",
									"// Guardar la contraseña para uso posterior en login\r",
									"const password = pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
									"pm.environment.set(\"contributor2_password\", password);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_PI}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{validFullName3}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{validUserName3}}\",\r\n    \"password\": \"{{contributor2_password}}\",\r\n    \"role\": \"collaborator\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "PI Creates PI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Capturar los datos enviados en la solicitud",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"// Guardar los valores enviados para comparar después",
									"const sentName = requestData.name;",
									"const sentUsername = requestData.username;",
									"const sentRole = requestData.role",
									"",
									"// Guardar variables de entorno",
									"pm.environment.set(\"collaborator2Id\", pm.response.json().id);",
									"pm.environment.set(\"collaborator2Username\", pm.response.json().username);",
									"pm.environment.set(\"collaborator2password\", requestData.password)",
									"",
									"// Verificar código de estado",
									"pm.test(\"Status code is 201 Created\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verificar información del usuario",
									"pm.test(\"collaborator 2 user information is valid\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									"// Verificar que los datos de respuesta coinciden con los enviados",
									"pm.test(\"collaborator 2 data in response matches request data\", function() {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Verificar que el nombre coincide",
									"    pm.expect(responseData.name).to.equal(sentName, \"Name in response should match sent name\");",
									"    ",
									"    // Verificar que el username coincide",
									"    pm.expect(responseData.username).to.equal(sentUsername, \"Username in response should match sent username\");",
									"});",
									"",
									"// Verificar que el usuario tiene el rol de collaborator",
									"pm.test(\"User has correct collaborator role\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.roles).to.be.an('array');",
									"    pm.expect(responseData.roles).to.include(sentRole, \"Role in response should match sent role\");",
									"});",
									"",
									"// Verificar que el usuario está asociado con la organización correcta",
									"pm.test(\"User is associated with correct organization\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.organizationName).to.equal(pm.environment.get(\"orgName\"), \"Organization name in response should match organization ID\");",
									"});",
									"",
									"// Guardar datos del usuario collaborator para verificación posterior",
									"pm.collectionVariables.set(\"collaborator2_user_id\", pm.response.json().id);",
									"pm.collectionVariables.set(\"collaborator2_username\", pm.response.json().username);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un nombre aleatorio\r",
									"let fullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (fullName.length < 8) {\r",
									"    fullName = fullName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - fullName.length));\r",
									"}\r",
									"pm.environment.set(\"validFullName3\", fullName);\r",
									"\r",
									"// Generar un nombre de usuario aleatorio\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (userName.length < 8) {\r",
									"    userName = userName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - userName.length));\r",
									"}\r",
									"pm.environment.set(\"validUserName3\", userName);\r",
									"\r",
									"// Guardar la contraseña para uso posterior en login\r",
									"const password = pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
									"pm.environment.set(\"contributor2_password\", password);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_PI}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{validFullName3}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{validUserName3}}\",\r\n    \"password\": \"{{contributor2_password}}\",\r\n    \"role\": \"pi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "PI Creates Admin - Fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/* ----------  STATUS & ERROR PAYLOAD ---------- */",
									"pm.test('Status code is 400 Bad Request', () => {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"const body = pm.response.json();",
									"",
									"pm.test('Error message is correct', () => {",
									"  pm.expect(body).to.eql({",
									"    message: 'PI can only create PI or COLLABORATOR users',",
									"    error:   'Bad Request',",
									"    statusCode: 400",
									"  });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un nombre aleatorio\r",
									"let fullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (fullName.length < 8) {\r",
									"    fullName = fullName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - fullName.length));\r",
									"}\r",
									"pm.environment.set(\"validFullName3\", fullName);\r",
									"\r",
									"// Generar un nombre de usuario aleatorio\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (userName.length < 8) {\r",
									"    userName = userName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - userName.length));\r",
									"}\r",
									"pm.environment.set(\"validUserName3\", userName);\r",
									"\r",
									"// Guardar la contraseña para uso posterior en login\r",
									"const password = pm.variables.replaceIn(\"{{$randomPassword}}\");\r",
									"pm.environment.set(\"contributor2_password\", password);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_PI}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{validFullName3}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{contributor2_password}}\",\r\n    \"role\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator2 logs in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token_COLLABORATOR2\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Status code is 201 Created\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Token is present\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"collaborator 2 login successful\", function() {\r",
									"    // Verificar que hay un token de respuesta (indicación de login exitoso)\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.token).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{collaborator2_username}}\",\r\n   \"password\": \"{{collaborator2password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator1 fails to create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code indicates forbidden access\", function() {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([401, 403]); // Forbidden (403) o Unauthorized (401)\r",
									"});\r",
									"\r",
									"pm.test(\"Response indicates permission denied\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    // Verificar que la respuesta indica falta de permisos o acceso denegado\r",
									"    // Pueden haber diferentes formatos de respuesta, así que verificamos las posibilidades comunes\r",
									"    if (responseData.message) {\r",
									"        pm.expect(responseData.message).to.match(/forbidden|unauthorized|denied|permission|access/i);\r",
									"    } else if (responseData.error) {\r",
									"        pm.expect(responseData.error).to.match(/forbidden|unauthorized|denied|permission|access/i);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Contributor cannot create users\", function() {\r",
									"    // Verificar que el código de estado no es 2xx (éxito)\r",
									"    pm.expect(pm.response.code).to.not.be.within(200, 299);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un nombre aleatorio\r",
									"let fullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (fullName.length < 8) {\r",
									"    fullName = fullName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - fullName.length));\r",
									"}\r",
									"pm.environment.set(\"validFullName4\", fullName);\r",
									"\r",
									"// Generar un nombre de usuario aleatorio\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (userName.length < 8) {\r",
									"    userName = userName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - userName.length));\r",
									"}\r",
									"pm.environment.set(\"validUserName4\", userName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_CONTRIBUTOR1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{validFullName4}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{validUserName4}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"role\": \"collaborator\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator2 gets info of collaborator1 - Fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_COLLABORATOR2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{collaborator_user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{collaborator_user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator 2 gets all users - Fails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function() {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_COLLABORATOR2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log Out as Admin 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de confirmación recibido\", function() {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Logout successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta en formato correcto\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"// Opcional: Limpiar el token almacenado al hacer logout\r",
									"// pm.environment.unset(\"token_ADMIN1\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{ADMIN1_USERNAME}}\",\r\n   \"password\": \"{{ADMIN1_PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 1 tries to get all Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 401 Unauthorized",
									"pm.test(\"Status code is 401 Unauthorized\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Verify error message indicates token revocation",
									"pm.test(\"Message indicates the token has been revoked\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.equal(\"Token has been revoked\");",
									"});",
									"",
									"// Verify error type is correctly labeled as Unauthorized",
									"pm.test(\"Error type is Unauthorized\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.error).to.equal(\"Unauthorized\");",
									"});",
									"",
									"// Verify response structure is correct",
									"pm.test(\"Response structure is correct\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData).to.have.property('error');",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"    pm.expect(responseData.statusCode).to.equal(401);",
									"});",
									"",
									"// Verify there is no valid token in the response",
									"pm.test(\"No token in the response\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.not.have.property('token');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log Out as Admin 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de confirmación recibido\", function() {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Logout successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta en formato correcto\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"// Opcional: Limpiar el token almacenado al hacer logout\r",
									"// pm.environment.unset(\"token_ADMIN1\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{ADMIN1_USERNAME}}\",\r\n   \"password\": \"{{ADMIN1_PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 2 tries to get all Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify status code is 401 Unauthorized",
									"pm.test(\"Status code is 401 Unauthorized\", function() {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Verify error message indicates token revocation",
									"pm.test(\"Message indicates the token has been revoked\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.message).to.equal(\"Token has been revoked\");",
									"});",
									"",
									"// Verify error type is correctly labeled as Unauthorized",
									"pm.test(\"Error type is Unauthorized\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.error).to.equal(\"Unauthorized\");",
									"});",
									"",
									"// Verify response structure is correct",
									"pm.test(\"Response structure is correct\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData).to.have.property('error');",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"    pm.expect(responseData.statusCode).to.equal(401);",
									"});",
									"",
									"// Verify there is no valid token in the response",
									"pm.test(\"No token in the response\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.not.have.property('token');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log Out as Collaborator 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de confirmación recibido\", function() {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Logout successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta en formato correcto\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"// Opcional: Limpiar el token almacenado al hacer logout\r",
									"// pm.environment.unset(\"token_ADMIN1\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_collaborator1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{ADMIN1_USERNAME}}\",\r\n   \"password\": \"{{ADMIN1_PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log Out as Collaborator 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de confirmación recibido\", function() {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Logout successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta en formato correcto\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"// Opcional: Limpiar el token almacenado al hacer logout\r",
									"// pm.environment.unset(\"token_ADMIN1\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_COLLABORATOR2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{ADMIN1_USERNAME}}\",\r\n   \"password\": \"{{ADMIN1_PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log Out PI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensaje de confirmación recibido\", function() {\r",
									"    pm.expect(pm.response.json().message).to.equal(\"Logout successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"Respuesta en formato correcto\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"    pm.expect(pm.response.json()).to.have.property('message');\r",
									"});\r",
									"\r",
									"// Opcional: Limpiar el token almacenado al hacer logout\r",
									"// pm.environment.unset(\"token_ADMIN1\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_PI}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{ADMIN1_USERNAME}}\",\r\n   \"password\": \"{{ADMIN1_PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Artifact",
			"item": [
				{
					"name": "Log in as Admin 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token_ADMIN1\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{ADMIN1_USERNAME}}\",\r\n   \"password\": \"{{ADMIN1_PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 1 Creates an org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"orgId\", pm.response.json().id);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"This organization focuses on {{$randomLoremWords}} and its main mission in life is {{$randomLoremWords}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log in as Admin 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token_ADMIN2\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{ADMIN2_USERNAME}}\",\r\n   \"password\": \"{{ADMIN2_PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN 1 Creates a PI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Capturar los datos enviados en la solicitud",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"// Guardar los valores enviados para comparar después",
									"const sentName = requestData.name;",
									"const sentEmail = requestData.email;",
									"const sentUsername = requestData.username;",
									"const sentRole = requestData.role",
									"",
									"// Guardar variables de entorno",
									"pm.environment.set(\"userId1\", pm.response.json().id);",
									"pm.environment.set(\"emailUser1\", pm.response.json().email);",
									"pm.environment.set(\"usernameUser1\", pm.response.json().username);",
									"pm.environment.set(\"nameOfUser1\", pm.response.json().name);",
									"pm.environment.set(\"pi_password\", requestData.password); // Save PI password for later use",
									"",
									"pm.test(\"Status code is 201 Created\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verificar información del usuario",
									"pm.test(\"User information is valid\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.email).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									"// Verificar que los datos de respuesta coinciden con los enviados",
									"pm.test(\"User data in response matches request data\", function() {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Verificar que el nombre coincide",
									"    pm.expect(responseData.name).to.equal(sentName, \"Name in response should match sent name\");",
									"    ",
									"    // Verificar que el email coincide",
									"    pm.expect(responseData.email).to.equal(sentEmail, \"Email in response should match sent email\");",
									"    ",
									"    // Verificar que el username coincide",
									"    pm.expect(responseData.username).to.equal(sentUsername, \"Username in response should match sent username\");",
									"});",
									"",
									"// Verificar que el usuario tiene el rol de PI",
									"pm.test(\"User has correct role\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.roles).to.be.an('array');",
									"    pm.expect(responseData.roles).to.include(sentRole, \"Role in response should match sent role\");",
									"});",
									"",
									"// Guardar datos del usuario para verificación posterior",
									"pm.collectionVariables.set(\"pi_user_id\", pm.response.json().id);",
									"pm.collectionVariables.set(\"pi_username\", pm.response.json().username);",
									"pm.collectionVariables.set(\"pi_email\", pm.response.json().email);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un nombre aleatorio\r",
									"let fullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (fullName.length < 8) {\r",
									"    fullName = fullName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - fullName.length));\r",
									"}\r",
									"pm.environment.set(\"validFullName\", fullName);\r",
									"\r",
									"// Generar un nombre de usuario aleatorio\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (userName.length < 8) {\r",
									"    userName = userName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - userName.length));\r",
									"}\r",
									"pm.environment.set(\"validUserName\", userName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{validFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{validUserName}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"role\": \"pi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 2 Creates a Collaborator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Capturar los datos enviados en la solicitud",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"// Guardar los valores enviados para comparar después",
									"const sentName = requestData.name;",
									"const sentEmail = requestData.email;",
									"const sentUsername = requestData.username;",
									"const sentRole = requestData.role",
									"",
									"// Guardar variables de entorno",
									"pm.environment.set(\"collaboratorId\", pm.response.json().id);",
									"pm.environment.set(\"collaboratorEmail\", pm.response.json().email);",
									"pm.environment.set(\"collaborator1Username\", pm.response.json().username);",
									"pm.environment.set(\"collaborator1_password\", requestData.password); // Save PI password for later use",
									"",
									"",
									"// Verificar código de estado",
									"pm.test(\"Status code is 201 Created\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verificar información del usuario",
									"pm.test(\"collaborator user information is valid\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.email).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									"// Verificar que los datos de respuesta coinciden con los enviados",
									"pm.test(\"collaborator data in response matches request data\", function() {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Verificar que el nombre coincide",
									"    pm.expect(responseData.name).to.equal(sentName, \"Name in response should match sent name\");",
									"    ",
									"    // Verificar que el email coincide",
									"    pm.expect(responseData.email).to.equal(sentEmail, \"Email in response should match sent email\");",
									"    ",
									"    // Verificar que el username coincide",
									"    pm.expect(responseData.username).to.equal(sentUsername, \"Username in response should match sent username\");",
									"});",
									"",
									"// Verificar que el usuario tiene el rol de collaborator",
									"pm.test(\"User has correct collaborator role\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.roles).to.be.an('array');",
									"    pm.expect(responseData.roles).to.include(sentRole, \"Role in response should match sent role\");",
									"});",
									"",
									"// Guardar datos del usuario collaborator para verificación posterior",
									"pm.collectionVariables.set(\"collaborator_user_id\", pm.response.json().id);",
									"pm.collectionVariables.set(\"collaborator_username\", pm.response.json().username);",
									"pm.collectionVariables.set(\"collaborator_email\", pm.response.json().email);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un nombre aleatorio\r",
									"let fullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (fullName.length < 8) {\r",
									"    fullName = fullName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - fullName.length));\r",
									"}\r",
									"pm.environment.set(\"validFullName2\", fullName);\r",
									"\r",
									"// Generar un nombre de usuario aleatorio\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (userName.length < 8) {\r",
									"    userName = userName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - userName.length));\r",
									"}\r",
									"pm.environment.set(\"validUserName2\", userName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{validFullName2}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{validUserName2}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"role\": \"collaborator\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator1 logs in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token_collaborator1\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Status code is 201 Created\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Token is present\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"collaborator login successful\", function() {\r",
									"    // Verificar que hay un token de respuesta (indicación de login exitoso)\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.token).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{collaborator1Username}}\",\r\n   \"password\": \"{{collaborator1_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "PI user logs in",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token_PI\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"Status code is 201 Created\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Token is present\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"PI login successful\", function() {\r",
									"    // Verificar que hay un token de respuesta (indicación de login exitoso)\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.token).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{pi_username}}\",\r\n   \"password\": \"{{pi_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 1 Creates an org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"orgId\", pm.response.json().id);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"This organization focuses on {{$randomLoremWords}} and its main mission in life is {{$randomLoremWords}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator Get All Orgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Non Empty list\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"    pm.expect(pm.response.json()).to.have.lengthOf(1);\r",
									"    pm.expect(pm.response.json()[0].id).to.equal(pm.environment.get(\"orgId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_collaborator1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator Create Artifact 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store the response data in environment variables\r",
									"pm.environment.set(\"artifactId1\", pm.response.json().id);\r",
									"pm.environment.set(\"artifactTitle1\", pm.response.json().title);\r",
									"pm.environment.set(\"artifactDescription1\", pm.response.json().description)\r",
									"\r",
									"// Test HTTP Status Code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Test Response Structure\r",
									"pm.test(\"Response has the correct structure\", function () {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"    // Required fields\r",
									"    pm.expect(response).to.have.property('id');\r",
									"    pm.expect(response).to.have.property('title');\r",
									"    pm.expect(response).to.have.property('description');\r",
									"    pm.expect(response).not.to.have.property('fileName');\r",
									"    pm.expect(response).not.to.have.property('hash');\r",
									"    pm.expect(response).not.to.have.property('submitterEmail');\r",
									"    pm.expect(response).not.to.have.property('submissionState');\r",
									"    pm.expect(response).not.to.have.property('organization');\r",
									"    pm.expect(response.lastTimeVerified).to.be.null;\r",
									"    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomHash(length) {",
									"    let result = '';",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"",
									"    return result;",
									"}",
									"",
									"// Set the generated hash in an environment variable",
									"pm.environment.set(\"artifacthash1\", generateRandomHash(64));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_collaborator1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomProductName}}\",\r\n    \"description\": \"Transform your living space with the Ultimate Home Organizer Kit...\",\r\n    \"fileName\": \"{{$randomFileName}}\",\r\n    \"hash\": \"{{artifacthash1}}\",\r\n    \"keywords\": [\"organizer\", \"home\", \"storage\", \"declutter\"],\r\n    \"links\": [\"https://example.com/product\"],\r\n    \"dois\": [\"\"],  // Change from [] to null\r\n    \"fundingAgencies\": [],\r\n    \"acknowledgements\": \"Thanks to all contributors\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/artifacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"artifacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Artifact 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Non empty response\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    // Verify stored values from creation\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"artifactId1\"));\r",
									"    pm.expect(responseData.title).to.equal(pm.environment.get(\"artifactTitle1\"));\r",
									"    pm.expect(responseData.description).to.equal(pm.environment.get(\"artifactDescription1\"));\r",
									"    pm.expect(responseData.hash).to.equal(pm.environment.get(\"artifacthash1\"));\r",
									"    \r",
									"    // Rest of the field validations\r",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.keywords).to.be.an('array').and.to.not.be.empty;\r",
									"    pm.expect(responseData.links).to.be.an('array');\r",
									"    pm.expect(responseData.dois).to.be.an('array');\r",
									"    pm.expect(responseData.fundingAgencies).to.be.an('array');\r",
									"    pm.expect(responseData.acknowledgements).to.be.a('string');\r",
									"    pm.expect(responseData.fileName).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.hash).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.verified).to.be.a('boolean');\r",
									"    pm.expect(responseData.lastTimeVerified).to.be.null; // Assuming null is expected\r",
									"    pm.expect(responseData.submissionState).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.submitterEmail).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.submittedAt).to.be.null; // Assuming null is expected\r",
									"    pm.expect(responseData.organization).to.be.an('object');\r",
									"    pm.expect(responseData.organization.name).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/artifacts/{{artifactId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"artifacts",
								"{{artifactId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PI Create Artifact 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Store the response data in environment variables\r",
									"pm.environment.set(\"artifact2title\", pm.response.json().title);\r",
									"pm.environment.set(\"artifactId2\", pm.response.json().id);\r",
									"pm.environment.set(\"artifactTitle2\", pm.response.json().title);\r",
									"pm.environment.set(\"artifactDescription2\", pm.response.json().description)\r",
									"\r",
									"// Test HTTP Status Code\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Test Response Structure\r",
									"pm.test(\"Response has the correct structure\", function () {\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"    // Required fields\r",
									"    pm.expect(response).to.have.property('id');\r",
									"    pm.expect(response).to.have.property('title');\r",
									"    pm.expect(response).to.have.property('description');\r",
									"    pm.expect(response).not.to.have.property('fileName');\r",
									"    pm.expect(response).not.to.have.property('hash');\r",
									"    pm.expect(response).not.to.have.property('submitterEmail');\r",
									"    pm.expect(response).not.to.have.property('submissionState');\r",
									"    pm.expect(response).not.to.have.property('organization');\r",
									"    pm.expect(response.lastTimeVerified).to.be.null;\r",
									"    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomHash(length) {",
									"    let result = '';",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"",
									"    return result;",
									"}",
									"",
									"// Set the generated hash in an environment variable",
									"pm.environment.set(\"artifacthash2\", generateRandomHash(64));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_PI}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomProductName}}\",\r\n    \"description\": \"Transform your living space with the Ultimate Home Organizer Kit...\",\r\n    \"fileName\": \"{{$randomFileName}}\",\r\n    \"hash\": \"{{artifacthash2}}\",\r\n    \"keywords\": [\"organizer\", \"home\", \"storage\", \"declutter\"],\r\n    \"links\": [\"https://example.com/product\"],\r\n    \"dois\": [\"\"],  // Change from [] to null\r\n    \"fundingAgencies\": [],\r\n    \"acknowledgements\": \"Thanks to all contributors\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/artifacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"artifacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Artifact 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Non empty response\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    // Verify stored values from creation\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"artifactId2\"));\r",
									"    pm.expect(responseData.title).to.equal(pm.environment.get(\"artifactTitle2\"));\r",
									"    pm.expect(responseData.description).to.equal(pm.environment.get(\"artifactDescription2\"));\r",
									"    pm.expect(responseData.hash).to.equal(pm.environment.get(\"artifacthash2\"));\r",
									"    \r",
									"    // Rest of the field validations\r",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.title).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.keywords).to.be.an('array').and.to.not.be.empty;\r",
									"    pm.expect(responseData.links).to.be.an('array');\r",
									"    pm.expect(responseData.dois).to.be.an('array');\r",
									"    pm.expect(responseData.fundingAgencies).to.be.an('array');\r",
									"    pm.expect(responseData.acknowledgements).to.be.a('string');\r",
									"    pm.expect(responseData.fileName).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.hash).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.verified).to.be.a('boolean');\r",
									"    pm.expect(responseData.lastTimeVerified).to.be.null; // Assuming null is expected\r",
									"    pm.expect(responseData.submissionState).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.submitterEmail).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.submittedAt).to.be.null; // Assuming null is expected\r",
									"    pm.expect(responseData.organization).to.be.an('object');\r",
									"    pm.expect(responseData.organization.name).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/artifacts/{{artifactId2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"artifacts",
								"{{artifactId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PI Create Artifact 2 same title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 412\", function() {\r",
									"    pm.response.to.have.status(412)\r",
									"});\r",
									"\r",
									"pm.test(\"Message is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"An artifact with this title already exists in the organization\")\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomHash(length) {",
									"    let result = '';",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"",
									"    return result;",
									"}",
									"",
									"// Set the generated hash in an environment variable",
									"pm.environment.set(\"artifacthash2\", generateRandomHash(64));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_PI}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{artifact2title}}\",\r\n    \"description\": \"Transform your living space with the Ultimate Home Organizer Kit...\",\r\n    \"fileName\": \"{{$randomFileName}}\",\r\n    \"hash\": \"{{artifacthash2}}\",\r\n    \"keywords\": [\"organizer\", \"home\", \"storage\", \"declutter\"],\r\n    \"links\": [\"https://example.com/product\"],\r\n    \"dois\": [\"\"],  // Change from [] to null\r\n    \"fundingAgencies\": [],\r\n    \"acknowledgements\": \"Thanks to all contributors\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/artifacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"artifacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Artifacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response length is 2\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an(\"array\").and.to.have.lengthOf(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Artifacts validation\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    // Environment variables for validation\r",
									"    const artifactIds = [\r",
									"        pm.environment.get(\"artifactId1\"),\r",
									"        pm.environment.get(\"artifactId2\"),\r",
									"    ];\r",
									"    const descriptions = [\r",
									"        pm.environment.get(\"description1\"),\r",
									"        pm.environment.get(\"description2\"),\r",
									"\r",
									"    ];\r",
									"\r",
									"    // Create a reference array of expected artifacts\r",
									"    const expectedArtifacts = artifactIds.map((id, index) => ({\r",
									"        id,\r",
									"        description: descriptions[index],\r",
									"    }));\r",
									"\r",
									"    // Sort both arrays by `id`\r",
									"    const sortedResponse = responseData.sort((a, b) => a.id.localeCompare(b.id));\r",
									"    const sortedExpectedArtifacts = expectedArtifacts.sort((a, b) => a.id.localeCompare(b.id));\r",
									"\r",
									"    // Validate each artifact\r",
									"    sortedResponse.forEach((artifact, index) => {\r",
									"        pm.expect(artifact.id).to.equal(sortedExpectedArtifacts[index].id);\r",
									"        pm.expect(artifact.description).to.equal(sortedExpectedArtifacts[index].description);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/artifacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"artifacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Orgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Organization and artifacts validation\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    // Validate response length\r",
									"    pm.expect(responseData).to.be.an(\"array\").and.to.have.lengthOf(1);\r",
									"\r",
									"    // Extract organization\r",
									"    const org = responseData[0];\r",
									"    pm.expect(org.id).to.equal(pm.environment.get(\"orgId\"));\r",
									"    pm.expect(org.artifacts).to.be.an(\"array\").and.to.have.lengthOf(2);\r",
									"\r",
									"    // Environment variables for artifacts validation\r",
									"    const artifactIds = [\r",
									"        pm.environment.get(\"artifactId1\"),\r",
									"        pm.environment.get(\"artifactId2\"),\r",
									"    ];\r",
									"  \r",
									"    const descriptions = [\r",
									"        pm.environment.get(\"description1\"),\r",
									"        pm.environment.get(\"description2\"),\r",
									"    ];\r",
									"\r",
									"    // Create a reference array of expected artifacts\r",
									"    const expectedArtifacts = artifactIds.map((id, index) => ({\r",
									"        id,\r",
									"        description: descriptions[index],\r",
									"    }));\r",
									"\r",
									"    // Sort both the response artifacts and the expected artifacts by `id`\r",
									"    const sortedResponseArtifacts = org.artifacts.sort((a, b) => a.id.localeCompare(b.id));\r",
									"    const sortedExpectedArtifacts = expectedArtifacts.sort((a, b) => a.id.localeCompare(b.id));\r",
									"\r",
									"    // Validate each artifact\r",
									"    sortedResponseArtifacts.forEach((artifact, index) => {\r",
									"        pm.expect(artifact.id).to.equal(sortedExpectedArtifacts[index].id);\r",
									"        pm.expect(artifact.description).to.equal(sortedExpectedArtifacts[index].description);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_PI}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Artifact wrong ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The artifact with the provided id does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/artifacts/{{$randomUUID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"artifacts",
								"{{$randomUUID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Artifact bad Org ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 412\", function() {\r",
									"    pm.response.to.have.status(412)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organizationId provided is not valid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/bad-id/artifacts/{{artifactId2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"bad-id",
								"artifacts",
								"{{artifactId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Artifactd wrong Org ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organization with the provided id does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{$randomUUID}}/artifacts/{{artifactId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{$randomUUID}}",
								"artifacts",
								"{{artifactId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Artifactd bad Org ID Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 404\", function() {\r",
									"    pm.response.to.have.status(412)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organizationId provided is not valid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/bad-id/artifacts/{{artifactId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"bad-id",
								"artifacts",
								"{{artifactId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator Create Artifact bad Org Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 412\", function() {\r",
									"    pm.response.to.have.status(412)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organizationId provided is not valid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomHash(length) {",
									"    let result = '';",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"",
									"    return result;",
									"}",
									"",
									"// Set the generated hash in an environment variable",
									"pm.environment.set(\"artifacthash1\", generateRandomHash(64));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_collaborator1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomProductName}}\",\r\n    \"description\": \"Transform your living space with the Ultimate Home Organizer Kit...\",\r\n    \"fileName\": \"{{$randomFileName}}\",\r\n    \"hash\": \"{{artifacthash1}}\",\r\n    \"keywords\": [\"organizer\", \"home\", \"storage\", \"declutter\"],\r\n    \"links\": [\"https://example.com/product\"],\r\n    \"dois\": [\"\"],  // Change from [] to null\r\n    \"fundingAgencies\": [],\r\n    \"acknowledgements\": \"Thanks to all contributors\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/bad-id/artifacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"bad-id",
								"artifacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator Create Artifact wrongOrg Id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 412\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organization with the provided id does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomHash(length) {",
									"    let result = '';",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"",
									"    return result;",
									"}",
									"",
									"// Set the generated hash in an environment variable",
									"pm.environment.set(\"artifacthash1\", generateRandomHash(64));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_collaborator1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{$randomProductName}}\",\r\n    \"description\": \"Transform your living space with the Ultimate Home Organizer Kit...\",\r\n    \"fileName\": \"{{$randomFileName}}\",\r\n    \"hash\": \"{{artifacthash1}}\",\r\n    \"keywords\": [\"organizer\", \"home\", \"storage\", \"declutter\"],\r\n    \"links\": [\"https://example.com/product\"],\r\n    \"dois\": [\"\"],  // Change from [] to null\r\n    \"fundingAgencies\": [],\r\n    \"acknowledgements\": \"Thanks to all contributors\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{$randomUUID}}/artifacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{$randomUUID}}",
								"artifacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "PI Update Artifact 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Accessing artifact with insufficient permissions returns 403 Forbidden\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('message', 'Forbidden resource');\r",
									"    pm.expect(responseData).to.have.property('error', 'Forbidden');\r",
									"    pm.expect(responseData).to.have.property('statusCode', 403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const bodyObject = {",
									"    name: \"Smart Home Security Kit\",",
									"    description: \"A complete smart security solution to protect your home, featuring motion sensors, HD cameras, and a mobile app for real-time monitoring.\",",
									"    category: \"Home Security\",",
									"    features: [",
									"        \"HD motion-activated cameras\",",
									"        \"Real-time mobile alerts\",",
									"        \"Easy DIY installation\",",
									"        \"Night vision support\",",
									"        \"Smart home integration\"",
									"    ],",
									"    price: 199.99,",
									"    availability: true,",
									"    dimensions: {",
									"        width: \"6 inches\",",
									"        height: \"9 inches\",",
									"        depth: \"3 inches\"",
									"    },",
									"    colorOptions: [\"white\", \"black\"],",
									"    rating: 4.8,",
									"    reviews: [",
									"        {",
									"            user: \"Emma T.\",",
									"            rating: 5,",
									"            comment: \"Easy to set up and works like a charm. Highly recommend!\"",
									"        },",
									"        {",
									"            user: \"John D.\",",
									"            rating: 4,",
									"            comment: \"Good system but the app interface could use improvement.\"",
									"        }",
									"    ]",
									"};",
									"",
									"// Convert JSON object to a string and set it as an environment variable",
									"pm.environment.set(\"body1_updated\", JSON.stringify(bodyObject));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_PI}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"Simplify your life with the Ultimate Home Organizer Kit, a smart and stylish solution for managing clutter in any space. Featuring modular bins, durable shelves, and customizable labels, this kit transforms bedrooms, kitchens, and offices into neat, efficient areas. Whether you're storing clothes, organizing kitchenware, or sorting supplies, it adapts to your needs with ease. Crafted from eco-friendly materials, it delivers both durability and elegance, making it an ideal choice for creating a sustainable, well-ordered home. Embrace a more organized lifestyle with this versatile and practical kit designed for modern living.\",\r\n    \"body\": {{body1_updated}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/artifacts/{{artifactId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"artifacts",
								"{{artifactId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "cOLLABORATOR Update Artifact 1 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Accessing artifact with insufficient permissions returns 403 Forbidden\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('message', 'Forbidden resource');\r",
									"    pm.expect(responseData).to.have.property('error', 'Forbidden');\r",
									"    pm.expect(responseData).to.have.property('statusCode', 403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const bodyObject = {",
									"    name: \"Smart Home Security Kit\",",
									"    description: \"A complete smart security solution to protect your home, featuring motion sensors, HD cameras, and a mobile app for real-time monitoring.\",",
									"    category: \"Home Security\",",
									"    features: [",
									"        \"HD motion-activated cameras\",",
									"        \"Real-time mobile alerts\",",
									"        \"Easy DIY installation\",",
									"        \"Night vision support\",",
									"        \"Smart home integration\"",
									"    ],",
									"    price: 199.99,",
									"    availability: true,",
									"    dimensions: {",
									"        width: \"6 inches\",",
									"        height: \"9 inches\",",
									"        depth: \"3 inches\"",
									"    },",
									"    colorOptions: [\"white\", \"black\"],",
									"    rating: 4.8,",
									"    reviews: [",
									"        {",
									"            user: \"Emma T.\",",
									"            rating: 5,",
									"            comment: \"Easy to set up and works like a charm. Highly recommend!\"",
									"        },",
									"        {",
									"            user: \"John D.\",",
									"            rating: 4,",
									"            comment: \"Good system but the app interface could use improvement.\"",
									"        }",
									"    ]",
									"};",
									"",
									"// Convert JSON object to a string and set it as an environment variable",
									"pm.environment.set(\"body1_updated\", JSON.stringify(bodyObject));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_collaborator1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"Simplify your life with the Ultimate Home Organizer Kit, a smart and stylish solution for managing clutter in any space. Featuring modular bins, durable shelves, and customizable labels, this kit transforms bedrooms, kitchens, and offices into neat, efficient areas. Whether you're storing clothes, organizing kitchenware, or sorting supplies, it adapts to your needs with ease. Crafted from eco-friendly materials, it delivers both durability and elegance, making it an ideal choice for creating a sustainable, well-ordered home. Embrace a more organized lifestyle with this versatile and practical kit designed for modern living.\",\r\n    \"body\": {{body1_updated}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/artifacts/{{artifactId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"artifacts",
								"{{artifactId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin Update Artifact 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Accessing artifact with insufficient permissions returns 403 Forbidden\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('message', 'Forbidden resource');\r",
									"    pm.expect(responseData).to.have.property('error', 'Forbidden');\r",
									"    pm.expect(responseData).to.have.property('statusCode', 403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const bodyObject = {",
									"    name: \"Smart Home Security Kit\",",
									"    description: \"A complete smart security solution to protect your home, featuring motion sensors, HD cameras, and a mobile app for real-time monitoring.\",",
									"    category: \"Home Security\",",
									"    features: [",
									"        \"HD motion-activated cameras\",",
									"        \"Real-time mobile alerts\",",
									"        \"Easy DIY installation\",",
									"        \"Night vision support\",",
									"        \"Smart home integration\"",
									"    ],",
									"    price: 199.99,",
									"    availability: true,",
									"    dimensions: {",
									"        width: \"6 inches\",",
									"        height: \"9 inches\",",
									"        depth: \"3 inches\"",
									"    },",
									"    colorOptions: [\"white\", \"black\"],",
									"    rating: 4.8,",
									"    reviews: [",
									"        {",
									"            user: \"Emma T.\",",
									"            rating: 5,",
									"            comment: \"Easy to set up and works like a charm. Highly recommend!\"",
									"        },",
									"        {",
									"            user: \"John D.\",",
									"            rating: 4,",
									"            comment: \"Good system but the app interface could use improvement.\"",
									"        }",
									"    ]",
									"};",
									"",
									"// Convert JSON object to a string and set it as an environment variable",
									"pm.environment.set(\"body1_updated\", JSON.stringify(bodyObject));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"Simplify your life with the Ultimate Home Organizer Kit, a smart and stylish solution for managing clutter in any space. Featuring modular bins, durable shelves, and customizable labels, this kit transforms bedrooms, kitchens, and offices into neat, efficient areas. Whether you're storing clothes, organizing kitchenware, or sorting supplies, it adapts to your needs with ease. Crafted from eco-friendly materials, it delivers both durability and elegance, making it an ideal choice for creating a sustainable, well-ordered home. Embrace a more organized lifestyle with this versatile and practical kit designed for modern living.\",\r\n    \"body\": {{body1_updated}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/artifacts/{{artifactId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"artifacts",
								"{{artifactId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an Artifact Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 401\", function() {\r",
									"    pm.response.to.have.status(401)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/artifacts/{{artifactId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"artifacts",
								"{{artifactId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PI DELETE an Artifact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Accessing artifact with insufficient permissions returns 403 Forbidden\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('message', 'Forbidden resource');\r",
									"    pm.expect(responseData).to.have.property('error', 'Forbidden');\r",
									"    pm.expect(responseData).to.have.property('statusCode', 403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_PI}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/artifacts/{{artifactId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"artifacts",
								"{{artifactId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator DELETE an Artifact Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Accessing artifact with insufficient permissions returns 403 Forbidden\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property('message', 'Forbidden resource');\r",
									"    pm.expect(responseData).to.have.property('error', 'Forbidden');\r",
									"    pm.expect(responseData).to.have.property('statusCode', 403);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_collaborator1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/artifacts/{{artifactId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"artifacts",
								"{{artifactId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin delete artifact 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/artifacts/{{artifactId2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"artifacts",
								"{{artifactId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin delete artifact 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/artifacts/{{artifactId2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"artifacts",
								"{{artifactId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin delete artifact 2 bad id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 412\", function() {\r",
									"    pm.response.to.have.status(412)\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The artifactId provided is not valid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/artifacts/bad-id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"artifacts",
								"bad-id"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin delete artifact 1 bad org id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 412\", function() {\r",
									"    pm.response.to.have.status(412)\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organizationId provided is not valid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/bad-id/artifacts/{{artifactId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"bad-id",
								"artifacts",
								"{{artifactId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin delete artifact 1 wrong org id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organization with the provided id does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{$randomUUID}}/artifacts/{{artifactId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{$randomUUID}}",
								"artifacts",
								"{{artifactId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All Unauthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 401\", function() {\r",
									"    pm.response.to.have.status(401)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All PI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 403\", function() {\r",
									"    pm.response.to.have.status(403)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_PI}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All Collaborator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 403\", function() {\r",
									"    pm.response.to.have.status(403)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_collaborator1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 204\", function() {\r",
									"    pm.response.to.have.status(204)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "pi_user_id",
			"value": ""
		},
		{
			"key": "pi_username",
			"value": ""
		},
		{
			"key": "pi_email",
			"value": ""
		},
		{
			"key": "contributor_user_id",
			"value": ""
		},
		{
			"key": "contributor_username",
			"value": ""
		},
		{
			"key": "contributor_email",
			"value": ""
		},
		{
			"key": "contributor2_user_id",
			"value": ""
		},
		{
			"key": "contributor2_username",
			"value": ""
		},
		{
			"key": "contributor2_email",
			"value": ""
		},
		{
			"key": "collaborator_user_id",
			"value": ""
		},
		{
			"key": "collaborator_username",
			"value": ""
		},
		{
			"key": "collaborator_email",
			"value": ""
		},
		{
			"key": "collaborator2_user_id",
			"value": ""
		},
		{
			"key": "collaborator2_username",
			"value": ""
		},
		{
			"key": "collaborator2_email",
			"value": ""
		}
	]
}