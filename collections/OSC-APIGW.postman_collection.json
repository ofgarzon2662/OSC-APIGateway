{
	"info": {
		"_postman_id": "bb648290-d705-4221-9c13-b04f58060e1b",
		"name": "OSC-APIGW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22997977"
	},
	"item": [
		{
			"name": "Organization",
			"item": [
				{
					"name": "Delete All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"orgId\", pm.response.json().id);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"This organization focuses on {{$randomLoremWords}} and its main mission in life is {{$randomLoremWords}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a second org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(412)\r",
									"});\r",
									"\r",
									"pm.test(\"Obtener el mensaje de error esperado\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"There is already an organization in the database. There can only be one.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"This organization focuses on {{$randomLoremWords}} and its main mission in life is {{$randomLoremWords}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"code is 204\", function() {\r",
									"    pm.response.to.have.status(204)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete NonExistent Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organization with the provided id does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org short name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"CODE IS 400\", function() {\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"\r",
									"pm.test(\"Obtener el mensaje de error esperado\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The name of the organization is required and must have at least 4 characters\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"UCS\",\r\n    \"description\": \"This organization focuses on {{$randomLoremWords}} and its main mission in life is {{$randomLoremWords}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org No Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"CODE IS 400\", function() {\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"\r",
									"pm.test(\"Obtener el mensaje de error esperado\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The description is required and must be at least 20 characters long\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"UCSD\",\r\n    \"description\": \"Short\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org long Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"CODE IS 400\", function() {\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"\r",
									"pm.test(\"Obtener el mensaje de error esperado\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The description cannot be longer than 250 characters\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"UCSD\",\r\n    \"description\": \"Founded in 1960, the University of California, San Diego (UCSD) is a renowned public research university located in La Jolla, California. Known for its innovation, academic excellence, and vibrant campus culture, UCSD offers top-ranked programs in a wide range of fields including oceanography, engineering, biological sciences, and public health. The university is home to over 38,000 students, cutting-edge research facilities, and numerous Nobel laureates and distinguished faculty members. UCSD also prioritizes sustainability, diversity, and global engagement, fostering an inclusive environment that supports groundbreaking research and community impact.\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"orgId\", pm.response.json().id);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"This organization focuses on {{$randomLoremWords}} and its main mission in life is {{$randomLoremWords}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Orgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Non Empty list\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"    pm.expect(pm.response.json()).to.have.lengthOf(1);\r",
									"    pm.expect(pm.response.json()[0].id).to.equal(pm.environment.get(\"orgId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get One Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Non empty response\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"orgId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"code is 204\", function() {\r",
									"    pm.response.to.have.status(204)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete NonExistent Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organization with the provided id does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get One Org No Orgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organization with the provided id does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Orgs No Orgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"There are no organizations in the database\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"orgId\", pm.response.json().id);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"This organization focuses on {{$randomLoremWords}} and its main mission in life is {{$randomLoremWords}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"El código de estado es 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().name).to.contain('Real Madrid CF');\r",
									"    pm.expect(pm.response.json().description).to.contain('Club de fútbol de Madrid');\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.equal(pm.environment.get(\"orgId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Real Madrid CF\",\r\n    \"description\": \"Club de fútbol de Madrid, España, fundado en 1902. Ganador de múltiples títulos europeos.\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get One Org 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Non empty response\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(pm.response.json().name).to.contain('Real Madrid CF');\r",
									"    pm.expect(pm.response.json().description).to.contain('Club de fútbol de Madrid');\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"orgId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an Org that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organization with the provided id does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Real Madrid CF\",\r\n    \"description\": \"Club de fútbol de Madrid, España, fundado en 1902. Ganador de múltiples títulos europeos.\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{$guid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{$guid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an Org short desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 400\", function() {\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The description is required and must be at least 20 characters long\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Real Madrid CF\",\r\n    \"description\": \"Club.\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an Org long description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 400\", function() {\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"\r",
									"pm.test(\"Obtener el mensaje de error esperado\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The description cannot be longer than 250 characters\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Real Madrid CF\",\r\n    \"description\": \"Real Madrid Club de Fútbol, commonly known as Real Madrid, is a professional football club based in Madrid, Spain. Founded on March 6, 1902, it is one of the most successful and prestigious clubs in football history. Known for its iconic all-white kit, Real Madrid has a rich legacy that includes numerous domestic and international titles, including a record number of UEFA Champions League titles and La Liga championships. The club is renowned for its loyal fanbase, global influence, and its home stadium, the Santiago Bernabéu, which has witnessed some of the greatest moments in football history. Real Madrid's philosophy emphasizes excellence, resilience, and a commitment to nurturing talent, from legendary players like Alfredo Di Stéfano and Cristiano Ronaldo to rising stars. As a symbol of Spanish football, the club is celebrated worldwide for its contributions to the sport and its enduring spirit of competition and success.\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"code is 204\", function() {\r",
									"    pm.response.to.have.status(204)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete NonExistent Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organization with the provided id does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Delete All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"orgId\", pm.response.json().id);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"This organization focuses on {{$randomLoremWords}} and its main mission in life is {{$randomLoremWords}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Orgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Non Empty list\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"    pm.expect(pm.response.json()).to.have.lengthOf(1);\r",
									"    pm.expect(pm.response.json()[0].id).to.equal(pm.environment.get(\"orgId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"userId1\", pm.response.json().id);\r",
									"pm.environment.set(\"emailUser1\", pm.response.json().email);\r",
									"pm.environment.set(\"usernameUser1\", pm.response.json().username);\r",
									"pm.environment.set(\"nameOfUser1\", pm.response.json().name);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().email).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().organization.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().organization.id).to.equal(pm.environment.get(\"orgId\"))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Non empty response\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"userId1\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 1 Wrong Org Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organization provided does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{$randomUUID}}/users/{{userId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{$randomUUID}}",
								"users",
								"{{userId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 1 bad Org Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 412\", function() {\r",
									"    pm.response.to.have.status(412)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organizationId provided is not valid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/no-valid-id/users/{{userId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"no-valid-id",
								"users",
								"{{userId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"userId2\", pm.response.json().id);\r",
									"pm.environment.set(\"emailUser2\", pm.response.json().email);\r",
									"pm.environment.set(\"usernameUser2\", pm.response.json().username);\r",
									"pm.environment.set(\"nameOfUser2\", pm.response.json().name);\r",
									"\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().email).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().organization.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().organization.id).to.equal(pm.environment.get(\"orgId\"))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Non empty response\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"userId2\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"userId3\", pm.response.json().id);\r",
									"pm.environment.set(\"emailUser3\", pm.response.json().email);\r",
									"pm.environment.set(\"usernameUser3\", pm.response.json().username);\r",
									"pm.environment.set(\"nameOfUser3\", pm.response.json().name);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().email).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().organization.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().organization.id).to.equal(pm.environment.get(\"orgId\"))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Non empty response\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"userId3\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId3}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The user with the provided id does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{$randomUUID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{$randomUUID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Orgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Non Empty list\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"    pm.expect(pm.response.json()).to.have.lengthOf(1);\r",
									"    pm.expect(pm.response.json()[0].id).to.equal(pm.environment.get(\"orgId\"));\r",
									"    pm.expect(pm.response.json()[0].users).to.not.be.empty;\r",
									"    pm.expect(pm.response.json()[0].users).to.be.an('array').that.has.lengthOf(3);\r",
									"    pm.expect(pm.response.json()[0].artifacts).to.be.an('array').that.has.lengthOf(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users in Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Non Empty list\", function() {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('array').that.is.not.empty;\r",
									"    pm.expect(responseJson).to.have.lengthOf(3);\r",
									"    pm.expect(responseJson[0].id).to.equal(pm.environment.get(\"userId1\"));\r",
									"    pm.expect(responseJson[1].id).to.equal(pm.environment.get(\"userId2\"));\r",
									"    pm.expect(responseJson[2].id).to.equal(pm.environment.get(\"userId3\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users in Org that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 412\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organization provided does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{$randomUUID}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{$randomUUID}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users Bad Org id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 412\", function() {\r",
									"    pm.response.to.have.status(412)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organizationId provided is not valid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/bad-org-id/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"bad-org-id",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User 1 username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Info is present\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().email).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"userId1\"));\r",
									"    pm.expect(responseData.username).to.equal(\"updated_username\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{nameOfUser1}}\",\r\n    \"email\": \"{{emailUser1}}\",\r\n    \"username\": \"updated_username\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Non empty response\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"userId1\"));\r",
									"    pm.expect(responseData.username).to.equal(\"updated_username\")\r",
									"    pm.expect(responseData.name).to.equal(pm.environment.get(\"nameOfUser1\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User 2 email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Info is present\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().email).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"userId2\"));\r",
									"    pm.expect(responseData.email).to.equal(\"new_email@hotmail.com\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{nameOfUser2}}\",\r\n    \"email\": \"new_email@hotmail.com\",\r\n    \"username\": \"{{usernameUser2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Non empty response\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"userId2\"));\r",
									"    pm.expect(responseData.username).to.equal(pm.environment.get(\"usernameUser2\"));\r",
									"    pm.expect(responseData.name).to.equal(pm.environment.get(\"nameOfUser2\"));\r",
									"    pm.expect(responseData.email).to.equal(\"new_email@hotmail.com\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User 3 with existing email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 400\", function() {\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The email provided is already in use\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{nameOfUser3}}\",\r\n    \"email\": \"new_email@hotmail.com\",\r\n    \"username\": \"{{usernameUser3}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId3}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User 3 with existing username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 400\", function() {\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The username provided is already in use\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{nameOfUser3}}\",\r\n    \"email\": \"{{emailUser3}}\",\r\n    \"username\": \"{{usernameUser2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId3}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The User with the provided id does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{nameOfUser3}}\",\r\n    \"email\": \"{{emailUser3}}\",\r\n    \"username\": \"{{usernameUser2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{$randomUUID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{$randomUUID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 204\", function() {\r",
									"    pm.response.to.have.status(204)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a non existent user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The User with the provided id does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Artifact",
			"item": [
				{
					"name": "Delete All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"orgId\", pm.response.json().id);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"This organization focuses on {{$randomLoremWords}} and its main mission in life is {{$randomLoremWords}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Orgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Non Empty list\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"    pm.expect(pm.response.json()).to.have.lengthOf(1);\r",
									"    pm.expect(pm.response.json()[0].id).to.equal(pm.environment.get(\"orgId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Artifact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"artifactId1\", pm.response.json().id);\r",
									"pm.environment.set(\"description1\", pm.response.json().email);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().body).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().organization.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().organization.id).to.equal(pm.environment.get(\"orgId\"))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const bodyObject = {",
									"    name: \"Ultimate Home Organizer Kit\",",
									"    description: \"A comprehensive storage solution designed to streamline and beautify every corner of your home, with modular bins, shelves, and customizable labels.\",",
									"    category: \"Home Organization\",",
									"    features: [",
									"        \"Eco-friendly materials\",",
									"        \"Modular storage bins\",",
									"        \"Durable shelves\",",
									"        \"Customizable labels\",",
									"        \"Versatile design for multiple rooms\"",
									"    ],",
									"    price: 49.99,",
									"    availability: true,",
									"    dimensions: {",
									"        width: \"12 inches\",",
									"        height: \"8 inches\",",
									"        depth: \"10 inches\"",
									"    },",
									"    colorOptions: [\"white\", \"black\", \"gray\"],",
									"    rating: 4.7,",
									"    reviews: [",
									"        {",
									"            user: \"Sarah J.\",",
									"            rating: 5,",
									"            comment: \"Perfect for organizing my craft supplies!\"",
									"        },",
									"        {",
									"            user: \"Mike L.\",",
									"            rating: 4,",
									"            comment: \"Sturdy and well-made, though a bit smaller than I expected.\"",
									"        }",
									"    ]",
									"};",
									"",
									"// Convert JSON object to a string and set it as an environment variable",
									"pm.environment.set(\"body1\", JSON.stringify(bodyObject));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"Introducing the Ultimate Home Organizer Kit, a comprehensive solution designed to streamline and beautify every corner of your home. This set includes modular storage bins, durable shelves, and customizable labels, perfect for decluttering bedrooms, kitchens, and office spaces. Made from eco-friendly materials, each item in this kit is built for versatility and durability. Whether you’re organizing clothes, kitchen items, or crafting supplies, this organizer kit offers a stylish, functional, and sustainable way to bring order to your home!\",\r\n    \"body\": {{body1}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/artifacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"artifacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Non empty response\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"userId1\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 1 Wrong Org Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organization provided does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{$randomUUID}}/users/{{userId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{$randomUUID}}",
								"users",
								"{{userId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 1 bad Org Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 412\", function() {\r",
									"    pm.response.to.have.status(412)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organizationId provided is not valid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/no-valid-id/users/{{userId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"no-valid-id",
								"users",
								"{{userId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"userId2\", pm.response.json().id);\r",
									"pm.environment.set(\"emailUser2\", pm.response.json().email);\r",
									"pm.environment.set(\"usernameUser2\", pm.response.json().username);\r",
									"pm.environment.set(\"nameOfUser2\", pm.response.json().name);\r",
									"\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().email).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().organization.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().organization.id).to.equal(pm.environment.get(\"orgId\"))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Non empty response\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"userId2\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"userId3\", pm.response.json().id);\r",
									"pm.environment.set(\"emailUser3\", pm.response.json().email);\r",
									"pm.environment.set(\"usernameUser3\", pm.response.json().username);\r",
									"pm.environment.set(\"nameOfUser3\", pm.response.json().name);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().email).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().organization.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().organization.id).to.equal(pm.environment.get(\"orgId\"))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Non empty response\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"userId3\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId3}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The user with the provided id does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{$randomUUID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{$randomUUID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Orgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Non Empty list\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"    pm.expect(pm.response.json()).to.have.lengthOf(1);\r",
									"    pm.expect(pm.response.json()[0].id).to.equal(pm.environment.get(\"orgId\"));\r",
									"    pm.expect(pm.response.json()[0].users).to.not.be.empty;\r",
									"    pm.expect(pm.response.json()[0].users).to.be.an('array').that.has.lengthOf(3);\r",
									"    pm.expect(pm.response.json()[0].artifacts).to.be.an('array').that.has.lengthOf(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users in Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Non Empty list\", function() {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('array').that.is.not.empty;\r",
									"    pm.expect(responseJson).to.have.lengthOf(3);\r",
									"    pm.expect(responseJson[0].id).to.equal(pm.environment.get(\"userId1\"));\r",
									"    pm.expect(responseJson[1].id).to.equal(pm.environment.get(\"userId2\"));\r",
									"    pm.expect(responseJson[2].id).to.equal(pm.environment.get(\"userId3\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users in Org that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 412\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organization provided does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{$randomUUID}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{$randomUUID}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users Bad Org id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 412\", function() {\r",
									"    pm.response.to.have.status(412)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The organizationId provided is not valid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"username\": \"{{$randomUserName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/bad-org-id/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"bad-org-id",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User 1 username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Info is present\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().email).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"userId1\"));\r",
									"    pm.expect(responseData.username).to.equal(\"updated_username\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{nameOfUser1}}\",\r\n    \"email\": \"{{emailUser1}}\",\r\n    \"username\": \"updated_username\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Non empty response\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"userId1\"));\r",
									"    pm.expect(responseData.username).to.equal(\"updated_username\")\r",
									"    pm.expect(responseData.name).to.equal(pm.environment.get(\"nameOfUser1\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User 2 email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Info is present\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().email).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"userId2\"));\r",
									"    pm.expect(responseData.email).to.equal(\"new_email@hotmail.com\")\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{nameOfUser2}}\",\r\n    \"email\": \"new_email@hotmail.com\",\r\n    \"username\": \"{{usernameUser2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Non empty response\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"userId2\"));\r",
									"    pm.expect(responseData.username).to.equal(pm.environment.get(\"usernameUser2\"));\r",
									"    pm.expect(responseData.name).to.equal(pm.environment.get(\"nameOfUser2\"));\r",
									"    pm.expect(responseData.email).to.equal(\"new_email@hotmail.com\")\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User 3 with existing email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 400\", function() {\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The email provided is already in use\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{nameOfUser3}}\",\r\n    \"email\": \"new_email@hotmail.com\",\r\n    \"username\": \"{{usernameUser3}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId3}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User 3 with existing username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 400\", function() {\r",
									"    pm.response.to.have.status(400)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The username provided is already in use\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{nameOfUser3}}\",\r\n    \"email\": \"{{emailUser3}}\",\r\n    \"username\": \"{{usernameUser2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId3}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User that doesn't exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error message\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The User with the provided id does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{nameOfUser3}}\",\r\n    \"email\": \"{{emailUser3}}\",\r\n    \"username\": \"{{usernameUser2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{$randomUUID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{$randomUUID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 204\", function() {\r",
									"    pm.response.to.have.status(204)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a non existent user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 404\", function() {\r",
									"    pm.response.to.have.status(404)\r",
									"});\r",
									"\r",
									"pm.test(\"Get error\", function() {\r",
									"   pm.expect(pm.response.json().message).to.eql(\"The User with the provided id does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}/users/{{userId1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}",
								"users",
								"{{userId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}