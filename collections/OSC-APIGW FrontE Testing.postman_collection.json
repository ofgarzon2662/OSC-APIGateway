{
	"info": {
		"_postman_id": "0bf7f175-cd4b-47df-90ff-061c5d474327",
		"name": "OSC-APIGW FrontE Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29465325"
	},
	"item": [
		{
			"name": "FrontEnd Init",
			"item": [
				{
					"name": "Log in as Admin 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token_ADMIN1\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Message</th>\r",
									"        <th>StatusCode</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.message}}</td>\r",
									"        <td>{{response.statusCode}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return {response: pm.response.json()}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{ADMIN1_USERNAME}}\",\r\n   \"password\": \"{{ADMIN1_PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 1 Creates an org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"orgId\", pm.response.json().id);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(pm.response.json().id).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomCompanyName}}\",\r\n    \"description\": \"This organization focuses on {{$randomLoremWords}} and its main mission in life is {{$randomLoremWords}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log in as Admin 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token_ADMIN2\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{ADMIN2_USERNAME}}\",\r\n   \"password\": \"{{ADMIN2_PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "ADMIN 1 Creates a PI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Capturar los datos enviados en la solicitud",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"// Guardar los valores enviados para comparar después",
									"const sentName = requestData.name;",
									"const sentUsername = requestData.username;",
									"const sentRole = requestData.role",
									"",
									"// Guardar variables de entorno",
									"pm.environment.set(\"userId1\", pm.response.json().id);",
									"pm.environment.set(\"usernameUser1\", pm.response.json().username);",
									"pm.environment.set(\"nameOfUser1\", pm.response.json().name);",
									"pm.environment.set(\"pi_password\", requestData.password); // Save PI password for later use",
									"",
									"pm.test(\"Status code is 201 Created\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verificar información del usuario",
									"pm.test(\"User information is valid\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									"// Verificar que los datos de respuesta coinciden con los enviados",
									"pm.test(\"User data in response matches request data\", function() {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Verificar que el nombre coincide",
									"    pm.expect(responseData.name).to.equal(sentName, \"Name in response should match sent name\");",
									"        ",
									"    // Verificar que el username coincide",
									"    pm.expect(responseData.username).to.equal(sentUsername, \"Username in response should match sent username\");",
									"});",
									"",
									"// Verificar que el usuario tiene el rol de PI",
									"pm.test(\"User has correct role\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.roles).to.be.an('array');",
									"    pm.expect(responseData.roles).to.include(sentRole, \"Role in response should match sent role\");",
									"});",
									"",
									"// Guardar datos del usuario para verificación posterior",
									"pm.collectionVariables.set(\"pi_user_id\", pm.response.json().id);",
									"pm.collectionVariables.set(\"pi_username\", pm.response.json().username);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un nombre aleatorio\r",
									"let fullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (fullName.length < 8) {\r",
									"    fullName = fullName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - fullName.length));\r",
									"}\r",
									"pm.environment.set(\"validFullName\", fullName);\r",
									"\r",
									"// Generar un nombre de usuario aleatorio\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (userName.length < 8) {\r",
									"    userName = userName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - userName.length));\r",
									"}\r",
									"pm.environment.set(\"validUserName\", userName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Fernando Garzon\",\r\n    \"email\": \"{{PI1_e2e_EMAIL}}\",\r\n    \"username\": \"{{PI1_e2e_USERNAME}}\",\r\n    \"password\": \"{{PI1_e2e_password}}\",\r\n    \"role\": \"pi\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin 2 Creates a Collaborator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Capturar los datos enviados en la solicitud",
									"const requestData = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};",
									"",
									"// Guardar los valores enviados para comparar después",
									"const sentName = requestData.name;",
									"const sentUsername = requestData.username;",
									"const sentRole = requestData.role",
									"",
									"// Guardar variables de entorno",
									"pm.environment.set(\"collaboratorId\", pm.response.json().id);",
									"pm.environment.set(\"collaborator1Username\", pm.response.json().username);",
									"pm.environment.set(\"collaborator1_password\", requestData.password); // Save PI password for later use",
									"",
									"",
									"// Verificar código de estado",
									"pm.test(\"Status code is 201 Created\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Verificar información del usuario",
									"pm.test(\"collaborator user information is valid\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.username).to.be.a('string').and.to.not.be.empty;",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;",
									"});",
									"",
									"// Verificar que los datos de respuesta coinciden con los enviados",
									"pm.test(\"collaborator data in response matches request data\", function() {",
									"    const responseData = pm.response.json();",
									"    ",
									"    // Verificar que el nombre coincide",
									"    pm.expect(responseData.name).to.equal(sentName, \"Name in response should match sent name\");",
									"        ",
									"    // Verificar que el username coincide",
									"    pm.expect(responseData.username).to.equal(sentUsername, \"Username in response should match sent username\");",
									"});",
									"",
									"// Verificar que el usuario tiene el rol de collaborator",
									"pm.test(\"User has correct collaborator role\", function() {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData.roles).to.be.an('array');",
									"    pm.expect(responseData.roles).to.include(sentRole, \"Role in response should match sent role\");",
									"});",
									"",
									"// Guardar datos del usuario collaborator para verificación posterior",
									"pm.collectionVariables.set(\"collaborator_user_id\", pm.response.json().id);",
									"pm.collectionVariables.set(\"collaborator_username\", pm.response.json().username);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generar un nombre aleatorio\r",
									"let fullName = pm.variables.replaceIn(\"{{$randomFullName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (fullName.length < 8) {\r",
									"    fullName = fullName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - fullName.length));\r",
									"}\r",
									"pm.environment.set(\"validFullName2\", fullName);\r",
									"\r",
									"// Generar un nombre de usuario aleatorio\r",
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\");\r",
									"// Asegurarse de que tiene al menos 8 caracteres\r",
									"if (userName.length < 8) {\r",
									"    userName = userName + \"_\" + pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\".repeat(8 - userName.length));\r",
									"}\r",
									"pm.environment.set(\"validUserName2\", userName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Fernando Garzon de Arango\",\r\n    \"email\": \"{{COLLABORATOR1_e2e_EMAIL}}\",\r\n    \"username\": \"{{COLLABORATOR1_e2e_USERNAME}}\",\r\n    \"password\": \"{{collaborator1_e2e_password}}\",\r\n    \"role\": \"collaborator\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator Get All Orgs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Non Empty list\", function() {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"    pm.expect(pm.response.json()).to.have.lengthOf(1);\r",
									"    pm.expect(pm.response.json()[0].id).to.equal(pm.environment.get(\"orgId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_collaborator1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Collaborator Get One Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is 200\", function() {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test(\"Non empty response\", function() {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.name).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.description).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.be.a('string').and.to.not.be.empty;\r",
									"    pm.expect(responseData.id).to.equal(pm.environment.get(\"orgId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_collaborator1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/organizations/{{orgId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations",
								"{{orgId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "FrontEnd Init TearDown",
			"item": [
				{
					"name": "Log in as Admin 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token_ADMIN1\", pm.response.json().token);\r",
									"\r",
									"pm.test(\"El código de estado es 201\", function() {\r",
									"    pm.response.to.have.status(201)\r",
									"});\r",
									"\r",
									"pm.test(\"Información presente\", function() {\r",
									"    pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
									"});\r",
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>Message</th>\r",
									"        <th>StatusCode</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.message}}</td>\r",
									"        <td>{{response.statusCode}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return {response: pm.response.json()}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"username\": \"{{ADMIN1_USERNAME}}\",\r\n   \"password\": \"{{ADMIN1_PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_ADMIN1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizations"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "pi_user_id",
			"value": ""
		},
		{
			"key": "pi_username",
			"value": ""
		},
		{
			"key": "pi_email",
			"value": ""
		},
		{
			"key": "contributor_user_id",
			"value": ""
		},
		{
			"key": "contributor_username",
			"value": ""
		},
		{
			"key": "contributor_email",
			"value": ""
		},
		{
			"key": "contributor2_user_id",
			"value": ""
		},
		{
			"key": "contributor2_username",
			"value": ""
		},
		{
			"key": "contributor2_email",
			"value": ""
		},
		{
			"key": "collaborator_user_id",
			"value": ""
		},
		{
			"key": "collaborator_username",
			"value": ""
		},
		{
			"key": "collaborator_email",
			"value": ""
		},
		{
			"key": "collaborator2_user_id",
			"value": ""
		},
		{
			"key": "collaborator2_username",
			"value": ""
		},
		{
			"key": "collaborator2_email",
			"value": ""
		}
	]
}